{"version":3,"sources":["index.js"],"names":["Chart","require","unix","Header","React","Component","StockView","state","realTimeData","c","h","l","o","pc","t","symbol","startDate","Date","parse","endDate","now","fetch","response","json","console","log","this","setState","update","ctx","document","getElementById","getContext","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","fill","pointBorderColor","pointRadius","options","C","chart","Page","className","ReactDOM","render"],"mappings":"sNAGMA,G,MAAQC,EAAQ,KAChBC,EAAOD,EAAQ,IAEfE,E,uKAEF,OACE,gCACE,6CACA,8B,GALaC,IAAMC,WAWrBC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,aAAc,CACZC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,GAAI,OACJC,EAAG,aATK,E,gMAeG,uBACTC,EAAS,MACTC,EAAYC,KAAKC,MAAM,4BACvBC,EAAUjB,EAAKe,KAAKG,O,SACHC,MACrB,iDACEN,EADF,uBAGEC,EAHF,OAKEG,EALF,+B,cADIG,E,gBAUaA,EAASC,O,OAAtBA,E,OACNC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEnB,aAAce,IAC9BG,KAAKE,SAGDC,EAAMC,SAASC,eAAe,WAAWC,WAAW,MAC5C,IAAIhC,EAAM6B,EAAK,CAEzBI,KAAM,OAGNC,KAAM,CACJC,OAAQT,KAAKnB,MAAMC,aAAaM,EAChCsB,SAAU,CACR,CACEC,MAAOtB,EACPuB,gBAAiB,oBACjBC,YAAa,oBACbC,YAAa,EACbN,KAAMR,KAAKnB,MAAMC,aAAaC,EAC9BgC,MAAM,EACNC,iBAAkB,UAClBC,YAAa,KAMnBC,QAAS,K,sIAMX,OAAOlB,KAAKnB,MAAMC,aAAaC,I,+BAI/B,OAAO,+CAAkBiB,KAAKE,gB,GArEVxB,IAAMC,WAyExBwC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKtC,MAAQ,GAFD,E,kLAMRsB,EAAMC,SAASC,eAAe,WAAWC,WAAW,MACpDc,EAAQ,IAAI9C,EAAM6B,EAAK,CAEzBI,KAAM,OAGNC,KAAM,CACJC,OAAQ,GACRC,SAAU,CACR,CACEC,MAAO,mBACPC,gBAAiB,oBACjBC,YAAa,oBACbL,KAAM,MAMZU,QAAS,KAEXpB,QAAQC,IAAIqB,G,gIAIZ,OAAO,yD,GAhCK1C,IAAMC,WAoChB0C,E,uKAEF,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,SAAf,UACE,cAAC7C,EAAD,IACA,cAACG,EAAD,IACA,cAACuC,EAAD,a,GAPSzC,IAAMC,WAgBzB4C,IAASC,OAAO,cAACH,EAAD,IAAUjB,SAASC,eAAe,U","file":"static/js/main.230c8314.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nconst Chart = require('chart.js');\r\nconst unix = require('to-unix-timestamp');\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Trading Bot</h1>\r\n        <br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass StockView extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      realTimeData: {\r\n        c: 116.59,\r\n        h: 117.49,\r\n        l: 116.22,\r\n        o: 116.57,\r\n        pc: 116.03,\r\n        t: 1606582932,\r\n      },\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const apiKey = 'bv184tv48v6p0f6idl20';\r\n    const symbol = 'IBM';\r\n    const startDate = Date.parse('01 Jan 1970 00:00:00 GMT');\r\n    const endDate = unix(Date.now());\r\n    const response = await fetch(\r\n      `https://finnhub.io/api/v1/stock/candle?symbol=` +\r\n        symbol +\r\n        `&resolution=60&from=` +\r\n        startDate +\r\n        `&to=` +\r\n        endDate +\r\n        `&token=` +\r\n        apiKey\r\n    );\r\n    const json = await response.json();\r\n    console.log(json);\r\n    this.setState({ realTimeData: json });\r\n    this.update();\r\n\r\n    // chart\r\n    var ctx = document.getElementById('myChart').getContext('2d');\r\n    var chart = new Chart(ctx, {\r\n      // The type of chart we want to create\r\n      type: 'line',\r\n\r\n      // The data for our dataset\r\n      data: {\r\n        labels: this.state.realTimeData.t,\r\n        datasets: [\r\n          {\r\n            label: symbol,\r\n            backgroundColor: 'rgb(255, 99, 132)',\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            borderWidth: 1,\r\n            data: this.state.realTimeData.c,\r\n            fill: false,\r\n            pointBorderColor: '#ffffff',\r\n            pointRadius: 3,\r\n          },\r\n        ],\r\n      },\r\n\r\n      // Configuration options go here\r\n      options: {},\r\n    });\r\n    //console.log(chart);\r\n  }\r\n\r\n  update() {\r\n    return this.state.realTimeData.c;\r\n  }\r\n\r\n  render() {\r\n    return <div>APPL Price: {this.update()}</div>;\r\n  }\r\n}\r\n\r\nclass C extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  async componentDidMount() {\r\n    var ctx = document.getElementById('myChart').getContext('2d');\r\n    var chart = new Chart(ctx, {\r\n      // The type of chart we want to create\r\n      type: 'line',\r\n\r\n      // The data for our dataset\r\n      data: {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgb(255, 99, 132)',\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n\r\n      // Configuration options go here\r\n      options: {},\r\n    });\r\n    console.log(chart);\r\n  }\r\n\r\n  render() {\r\n    return <h2>Graph From chart.js</h2>;\r\n  }\r\n}\r\n\r\nclass Page extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <div className=\"header\">\r\n          <Header />\r\n          <StockView />\r\n          <C />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Page />, document.getElementById('root'));\r\n"],"sourceRoot":""}